{
    "docs": [
        {
            "location": "/", 
            "text": "\u6b22\u8fce\n\n\n\u8fd9\u91cc\u662f \nonevcat\n \u7684\u516c\u5f00\u7b14\u8bb0\u672c\u3002\n\n\n\u8fd9\u4e2a\u7b14\u8bb0\u672c\u5f00\u6e90\u5728 \nGitHub\n \u4e0a\uff0c\u8bb0\u5f55\u4e86\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u65b9\u4fbf\u81ea\u5df1\u4e4b\u540e\u67e5\u770b\u3002", 
            "title": "\u4e3b\u9875"
        }, 
        {
            "location": "/#_1", 
            "text": "\u8fd9\u91cc\u662f  onevcat  \u7684\u516c\u5f00\u7b14\u8bb0\u672c\u3002  \u8fd9\u4e2a\u7b14\u8bb0\u672c\u5f00\u6e90\u5728  GitHub  \u4e0a\uff0c\u8bb0\u5f55\u4e86\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u65b9\u4fbf\u81ea\u5df1\u4e4b\u540e\u67e5\u770b\u3002", 
            "title": "\u6b22\u8fce"
        }, 
        {
            "location": "/reserve-enginnering/tools/", 
            "text": "\u5de5\u5177\n\n\ncycript\n\n\nCycript allows developers to explore and modify running applications on either iOS or Mac OS X using a hybrid of Objective-C++ and JavaScript syntax through an interactive console that features syntax highlighting and tab completion.\n\n\n\u53c2\u8003\u6587\u6863 \niPhonDev Wiki\n\uff0c\nCycript Manual\n\n\n\u547d\u4ee4\u4ee5 ? \u5f00\u5934\n\n\n\n\n?syntax \u9ad8\u4eae\n\n\n?exit\n\n\n?expand \u5c55\u5f00 CYON (Cycript Object Notation)\u3002\u4e00\u822c\u7528\u6765\u5c55\u5f00\u5b57\u7b26\u4e32\u4e2d\u7684 \n\\n\n\n\n?debug\n\n\n\n\n\u4e0e Objective-C \u4ea4\u4e92\n\n\n\n\n@\n - @\"hello\"\uff0c@[2,4,5]\n\n\n\u81ea\u7701 - \ninstanceof\n \n@\"hello\" instanceof String\n -\n \ntrue\n\n\nselector - @selector(this:is:a:message:) -\n sel_registerName(\"this:is:a:message:\")\n    \u53ef\u4ee5\u76f4\u63a5 call() \u4e00\u4e2a selector\n\n\n#\n \u4ee3\u8868 object\uff1aUIApp -\n #\"\n\", s = #0x10e803490 -\n #\"\n\"\n\n\n\u4f7f\u7528 \n*\n \u8fd4\u56de\u5bf9\u8c61\u7ed3\u6784\u7684 representation\uff0c\u4f7f\u7528 \n-\n \u8bbf\u95ee\u6210\u5458\n\n\nmessages\n \u83b7\u53d6\u7c7b\u578b\u80fd\u54cd\u5e94\u7684\u6d88\u606f\uff1a\nNSObject.messages\n\n\nframe -  [[1, 1],{width:2,height:2}]\n\n\n\u6dfb\u52a0 Category\n\n\n\n\ncy# @implementation NSObject (MyCategory)\ncy\n - description { return \nhello\n; }\ncy\n - (double) f:(int)v  { return v * 0.5; }\ncy\n @end\ncy# o = [new NSObject init]\n#\nhello\n\ncy# [o f:3]\n1.5\n\n\n\n\n\n\nblock\uff1a\nblock = ^ int (int value) { return value + 5; }\n\n\n\n\n\u5176\u4ed6\n\n\n\n\nchoose(Class)\uff1a\u6240\u6709 \nClass\n \u7684\u5b9e\u4f8b\u3002\u901a\u8fc7\u5bfb\u627e heap \u4e0a\u5185\u5b58\u84dd\u56fe\u4e00\u81f4\u7684\u5757\u6765\u786e\u5b9a\u662f\u5426\u662f\u5b9e\u4f8b\n\n\n\u548c Mobile Substrate \u4e00\u8d77\u4f7f\u7528\uff1a@import com.saurik.substrate.MS\n\n\nC \u4ea4\u4e92\uff1a\u4f7f\u7528 dlopen \u548c dlsym \u52a0\u8f7d\u7b26\u53f7\uff1a\n    \nc\n    dlsym(RTLD_DEFAULT, \"swift_demangleClassSimple\")", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/reserve-enginnering/tools/#_1", 
            "text": "", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/reserve-enginnering/tools/#cycript", 
            "text": "Cycript allows developers to explore and modify running applications on either iOS or Mac OS X using a hybrid of Objective-C++ and JavaScript syntax through an interactive console that features syntax highlighting and tab completion.  \u53c2\u8003\u6587\u6863  iPhonDev Wiki \uff0c Cycript Manual  \u547d\u4ee4\u4ee5 ? \u5f00\u5934   ?syntax \u9ad8\u4eae  ?exit  ?expand \u5c55\u5f00 CYON (Cycript Object Notation)\u3002\u4e00\u822c\u7528\u6765\u5c55\u5f00\u5b57\u7b26\u4e32\u4e2d\u7684  \\n  ?debug   \u4e0e Objective-C \u4ea4\u4e92   @  - @\"hello\"\uff0c@[2,4,5]  \u81ea\u7701 -  instanceof   @\"hello\" instanceof String  -   true  selector - @selector(this:is:a:message:) -  sel_registerName(\"this:is:a:message:\")\n    \u53ef\u4ee5\u76f4\u63a5 call() \u4e00\u4e2a selector  #  \u4ee3\u8868 object\uff1aUIApp -  #\" \", s = #0x10e803490 -  #\" \"  \u4f7f\u7528  *  \u8fd4\u56de\u5bf9\u8c61\u7ed3\u6784\u7684 representation\uff0c\u4f7f\u7528  -  \u8bbf\u95ee\u6210\u5458  messages  \u83b7\u53d6\u7c7b\u578b\u80fd\u54cd\u5e94\u7684\u6d88\u606f\uff1a NSObject.messages  frame -  [[1, 1],{width:2,height:2}]  \u6dfb\u52a0 Category   cy# @implementation NSObject (MyCategory)\ncy  - description { return  hello ; }\ncy  - (double) f:(int)v  { return v * 0.5; }\ncy  @end\ncy# o = [new NSObject init]\n# hello \ncy# [o f:3]\n1.5   block\uff1a block = ^ int (int value) { return value + 5; }   \u5176\u4ed6   choose(Class)\uff1a\u6240\u6709  Class  \u7684\u5b9e\u4f8b\u3002\u901a\u8fc7\u5bfb\u627e heap \u4e0a\u5185\u5b58\u84dd\u56fe\u4e00\u81f4\u7684\u5757\u6765\u786e\u5b9a\u662f\u5426\u662f\u5b9e\u4f8b  \u548c Mobile Substrate \u4e00\u8d77\u4f7f\u7528\uff1a@import com.saurik.substrate.MS  C \u4ea4\u4e92\uff1a\u4f7f\u7528 dlopen \u548c dlsym \u52a0\u8f7d\u7b26\u53f7\uff1a\n     c\n    dlsym(RTLD_DEFAULT, \"swift_demangleClassSimple\")", 
            "title": "cycript"
        }, 
        {
            "location": "/", 
            "text": "\u6b22\u8fce\n\n\n\u8fd9\u91cc\u662f \nonevcat\n \u7684\u516c\u5f00\u7b14\u8bb0\u672c\u3002\n\n\n\u8fd9\u4e2a\u7b14\u8bb0\u672c\u5f00\u6e90\u5728 \nGitHub\n \u4e0a\uff0c\u8bb0\u5f55\u4e86\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u65b9\u4fbf\u81ea\u5df1\u4e4b\u540e\u67e5\u770b\u3002", 
            "title": "Advanced Swift"
        }, 
        {
            "location": "/#_1", 
            "text": "\u8fd9\u91cc\u662f  onevcat  \u7684\u516c\u5f00\u7b14\u8bb0\u672c\u3002  \u8fd9\u4e2a\u7b14\u8bb0\u672c\u5f00\u6e90\u5728  GitHub  \u4e0a\uff0c\u8bb0\u5f55\u4e86\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u65b9\u4fbf\u81ea\u5df1\u4e4b\u540e\u67e5\u770b\u3002", 
            "title": "\u6b22\u8fce"
        }, 
        {
            "location": "/nshipster/", 
            "text": "NSHipster\n\n\n\n\n#pragma\n\n\npragma \u7684\u539f\u59cb\u76ee\u7684\u662f\u4f7f\u6e90\u4ee3\u7801\u9002\u914d\u591a\u79cd\u7f16\u8bd1\u5668\uff0c\u4f46\u662f\u73b0\u9636\u6bb5\u66f4\u591a\u65f6\u5019\u7528\u4e8e\u5206\u5272\u4ee3\u7801\uff0c\u589e\u52a0\u53ef\u8bfb\u6027\u3002\u7c7b\u4f3c\u7528\u6cd5\n\n\n#pragma mark - UIViewController\n- (void)viewDidLoad {\n}\n\n#pragma mark - IBAction\n- (IBAction)cancel:(id)sender {\n}\n\n\n\n\n\u5c06\u5728\u4ee3\u7801\u5757\u8df3\u8f6c\u7684\u4e0b\u62c9pop\u4e2d\u751f\u6210\u6a2a\u7ebf\u548c\u540d\u5b57\uff0c\u4fbf\u4e8e\u67e5\u627e\u4ee3\u7801\n\n\n\u53e6\u5916 #pragma \u591a\u7528\u4e8e\u4e34\u65f6\u7981\u7528\u6216\u8005\u542f\u7528\u4e00\u4e9b\u8b66\u544a\uff0c\u6bd4\u5982\n\n\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \u201c-Warc-retain-cycles\u201d\n    self.completionBlock = ^ {\n\n    };\n#pragma clang diagnostic pop\n\n\n\n\n\u5173\u4e8e\u8b66\u544a\uff0c\u66f4\u591a\u53ef\u53c2\u770b\n\u8fd9\u91cc\n \u4ee5\u53ca\n\u8fd9\u91cc\n\n\n\u53e6\u5916\u8fd8\u6709 \nWhich Clang Warning Is Generating This Message?\n\n\n\n\nBOOL / bool / Boolean / NSCFBoolean\n\n\nobjc \u4e2d\u4e00\u822c\u4f7f\u7528 BOOL \u505a\u771f\u5047\u5224\u65ad\u3002\u5fc5\u987b\u6ce8\u610f BOOL \u5728 objc \u4e2d\u662f\u88ab typedef \u4e3a signed char \u7684\uff0c\u56e0\u6b64\u5728\u6bd4\u8f83\u65f6\u4e0d\u5efa\u8bae\u4f7f\u7528 BOOLValue == YES \u6216\u8005 NO \u4e4b\u7c7b\u7684\u5199\u6cd5\u3002\u53e6\u5916\u5728\u8fd4\u56de\u4e00\u4e2a BOOL \u503c\u65f6\uff0c\u4e5f\u4e00\u5b9a\u8fdb\u884c\u6761\u4ef6\u5316\u540e\u518d\u8fdb\u884c\u8fd4\u56de\u3002\n\n\n\u9519\u8bef\u7528\u4f8b\n\n\nstatic BOOL different (int a, int b) {\n    return a - b;\n}\n\nif (different(11, 10) == YES) {\n  printf (\u201c11 != 10\\n\u201d);\n} else {\n  printf (\u201c11 == 10\\n\u201d);\n}!\nif (different(10, 11) == YES) {\n  printf (\u201c10 != 11\\n\u201d);\n} else {\n  printf (\u201c10 == 11\\n\u201d);\n}!\nif (different(512, 256) == YES) {\n  printf (\u201c512 != 256\\n\u201d);\n} else {\n  printf (\u201c512 == 256\\n\u201d);\n}\n\n\n\n\n\u8f93\u51fa\u4e3a\uff1a\n\n\n11 != 10\n10 == 11\n512 == 256\n\n\n\n\nmake no sense!\n\n\n@(YES)\n \u5f97\u5230\u7684\u662f\u4e00\u4e2a \n__NSCFBoolean\n\uff0c\u8fd9\u662f \nNSNumber\n \u7684 class cluster \u7684\u4e00\u4e2a\u79c1\u6709\u7c7b\u3002\u5173\u4e8e class cluster \u7684\u66f4\u591a\uff0c\u53ef\u4ee5\u53c2\u8003 \nApple \u6587\u6863\n\n\n\n\n\n\nnil / Nil /  NULL / NSNull\n\n\nC \u8bed\u8a00\n\n\n\n\n\u5bf9\u4e8e\u7a7a\u539f\u59cb\u503c 0  \n\n\n\u5bf9\u4e8e\u7a7a\u6307\u9488NULL\n\n\n\n\nObjective-C \u5728 C \u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86 \n\n\n\n\nnil - \u7a7a\u5bf9\u8c61\n\n\nNil - \u7a7a\u7c7b\u548c \n\n\nNSNull - \u5b9e\u9645\u7684\u4e00\u4e2a\u5bf9\u8c61\n\n\n\n\n\u4efb\u4f55\u5bf9 nil \u53d1\u9001\u7684\u6d88\u606f\u90fd\u4f1a\u8fd4\u56de 0 \u503c\uff0cobjc \u5f88\u72ec\u7279\u7684\u4e00\u4e2a\u70b9\n\n\nNSArray \u548c NSDictionary \u4e0d\u80fd\u5b58\u50a8 nil\uff0c\u56e0\u6b64\u4f7f\u7528 NSNull \u5bf9\u8c61\u6765\u8fdb\u884c\u8868\u793a\n\n\n\n\n\n\n\n\nType\n\n\nWhat\n\n\nDetail\n\n\n\n\n\n\n\n\n\n\nNULL\n\n\n(void *)0\n\n\nliteral null value for C pointers\n\n\n\n\n\n\nnil\n\n\n(id)0\n\n\nliteral null value for Objective-C objects\n\n\n\n\n\n\nNil\n\n\n(Class)0\n\n\nliteral null value for Objective-C classes\n\n\n\n\n\n\nNSNull\n\n\n[NSNull null]\n\n\nsingleton object used to represent null\n\n\n\n\n\n\n\n\niOS 7 SDK\u4e2d\u5173\u4e8e\u8fd9\u4e9b\u7684\u5b9a\u4e49\n\n\nMacTypes.h\n#ifndef NULL\n#define NULL    __DARWIN_NULL\n#endif /* ! NULL */\n#ifndef nil\n    #define nil NULL\n#endif /* ! nil */\n\nobjc.h\ndefine Nil __DARWIN_NULL\n\n_types.h\n#ifdef __cplusplus\n    #ifdef __GNUG__\n        #define __DARWIN_NULL __null\n    #else /* ! __GNUG__ */\n        #ifdef __LP64__\n            #define __DARWIN_NULL (0L)\n        #else /* !__LP64__ */\n            #define __DARWIN_NULL 0\n        #endif /* __LP64__ */\n    #endif /* __GNUG__ */\n#else /* ! __cplusplus */\n    #define __DARWIN_NULL ((void *)0)\n#endif /* __cplusplus */\n\n\n\n\n\n\nEquality\n\n\n\u76f4\u63a5\u5bf9\u5bf9\u8c61\u8fdb\u884c == \u64cd\u4f5c\u7b26\u8fd0\u7b97\u8868\u793a\u6bd4\u8f83\u6307\u9488\u662f\u5426\u76f8\u7b49\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0bNSObject\u7684-isEqual:\u65b9\u6cd5\u4e5f\u662f\u6bd4\u8f83\u6307\u9488\u76f8\u7b49\u3002\n\n\n\u5bf9\u4e8e\u7279\u5b9a\u7684NSObject\u7c7b\uff0c\u4e00\u822c\u4f1a\u5b58\u5728\u7279\u5b9a\u7684\u5224\u7b49\u65b9\u6cd5\uff0c\u5982\n\n\n\n\n\n\n\n\nClass\n\n\nMethod\n\n\n\n\n\n\n\n\n\n\nNSAttributedString\n\n\n-isEqualToAttributedString:\n\n\n\n\n\n\nNSData\n\n\n-isEqualToData:\n\n\n\n\n\n\nNSDate\n\n\n-isEqualToDate:\n\n\n\n\n\n\nNSDictionary\n\n\n-isEqualToDictionary:\n\n\n\n\n\n\nNSHashTable\n\n\n-isEqualToHashTable:\n\n\n\n\n\n\nNSIndexSet\n\n\n-isEqualToIndexSet:\n\n\n\n\n\n\nNSNumber\n\n\n-isEqualToNumber:\n\n\n\n\n\n\nNSOrderedSet\n\n\n-isEqualToOrderedSet:\n\n\n\n\n\n\nNSSet\n\n\n-isEqualToSet:\n\n\n\n\n\n\nNSString\n\n\n-isEqualToString:\n\n\n\n\n\n\nNSTimeZone\n\n\n-isEqualToTimeZone:\n\n\n\n\n\n\nNSValue\n\n\n-isEqualToValue:\n\n\n\n\n\n\n\n\n\u5bf9\u4e8e\u81ea\u5b9a\u4e49\u7684\u5224\u7b49\uff0c\u4e00\u822c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u81ea\u5df1\u7684 \n-isEqualXXX:\n \u65b9\u6cd5\u6765\u6bd4\u8f83\u67d0\u4e9b\u611f\u5174\u8da3\u7684\u5c5e\u6027\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u91cd\u8f7d \n-isEqual:\n\uff0c\u4f46\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5bf9\u4e8e \n-hash\n \u4e5f\u8fdb\u884c\u91cd\u8f7d\u53ef\u4ee5\u6709\u6548\u63d0\u9ad8\u6563\u5217\u6548\u7387\u3002\n\n\n\u5728\u5b9e\u73b0 \nisEqual:\n \u548c \nhash\n \u7684\u91cd\u8f7d\u65f6\uff0c\u6ce8\u610f\uff1a\n\n\nObject equality is commutative \u2028 ([a isEqual:b] \u21d2 [b isEqual:a])\n\n\nIf objects are equal, their hash values must also be equal \u2028 ([a isEqual:b] \u21d2 [a hash] == [b hash])\n\n\nHowever, the converse does not hold: two objects need not be equal in order for their hash values to be equal \n([a hash] == [b hash] \u00ac\u21d2 [a isEqual:b])\n\n\n\n\nC Storage Classes\n\n\nauto\n\n\nC \u4e2d\u9ed8\u8ba4\u7684\u5b58\u50a8\u5173\u952e\u5b57\u3002\u81ea\u52a8\u5728\u7a0b\u5e8f\u8fdb\u5165\u5757\u65f6\u4e3a\u53d8\u91cf\u7533\u8bf7\u5185\u5b58\uff0c\u5e76\u4e14\u5728\u79bb\u5f00\u5757\u65f6\u8fdb\u884c\u91ca\u653e\u3002\nauto\n \u7684\u53d8\u91cf\u53ea\u5728\u5757\u4f5c\u7528\u57df\u4e2d\u6709\u6548\u3002\n\n\nregister\n\n\n\u5728 NS \u7684\u4e16\u754c\u4e0d\u5e38\u7528\u3002\u548c \nauto\n \u7c7b\u4f3c\uff0c\u4f46\u662f\u53d8\u91cf\u4e0d\u4f1a\u5728\u6808\u4e0a\u88ab\u7533\u8bf7\uff0c\u800c\u4f1a\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\u3002\u5bc4\u5b58\u5668\u6bd4 RAM \u5feb\uff0c\u4f46\u662f\u524d\u63d0\u662f\u7ecf\u8fc7\u826f\u597d\u8bbe\u8ba1\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u6ee5\u7528\u5bc4\u5b58\u5668\u8fdb\u884c\u5b58\u50a8\u7ed3\u679c\u5f80\u5f80\u53ef\u80fd\u56e0\u4e3a\u4e0d\u5fc5\u8981\u5730\u5360\u7528\u5bc4\u5b58\u5668\u800c\u5bfc\u81f4\u53d8\u6162\u3002\u4f7f\u7528 \nregister\n \u5b9e\u9645\u4e0a\u53ea\u4f5c\u4e3a\u7f16\u8bd1\u5668\u7684\u53c2\u8003\uff0c\u5b9e\u9645\u4e0a\u7f16\u8bd1\u5668\u53ef\u80fd\u4e0d\u4f7f\u7528\u5bc4\u5b58\u5668\u3002\n\n\nstatic\n\n\n\u8fd9\u4e2a\u5173\u952e\u5b57\u7528\u4e8e\u5b58\u50a8\u65f6\uff0c\u6709\u4e24\u79cd\u542b\u4e49\n\n\n\n\n\u5728\u65b9\u6cd5\u6216\u51fd\u6570\u4e2d\u7684static\u8868\u793a\u503c\u5728\u4e0d\u540c\u7684call\u4e2d\u4fdd\u6301\u4e00\u81f4\u3002\n\n\n\u5168\u5c40\u58f0\u660e\u7684static\u53d8\u91cf\u53ef\u4ee5\u88ab\u4efb\u4f55\u65b9\u6cd5\u6216\u51fd\u6570\u53d6\u5230\u3002\n\n\n\n\n\u5728 OC \u4e2d\uff0c\u4e00\u4e2a\u5e38\u7528 \nstaic\n \u7684\u5730\u65b9\u662f\u5355\u4f8b\u3002objc \u6700\u4f73\u7684\u5355\u4f8b\u5b9e\u8df5\n\n\n+ (instancetype)sharedInstance {\n    static id _sharedInstance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(\nonceToken, ^{\n        _sharedInstance = [[self alloc] init]; \n    });\n    return _sharedInstance;\n}\n\n\n\n\n\u7ebf\u7a0b\u5b89\u5168\uff0c\u5fc5\u5b9a\u53ea\u4f1a\u88ab call \u4e00\u6b21\n\n\nextern\n\n\n\u548c \nstatic\n \u4e0d\u540c\uff0c\nextern\n \u58f0\u660e\u7684\u53d8\u91cf\u6216\u8005\u65b9\u6cd5\u53ef\u4ee5\u5728\u6240\u6709\u6587\u4ef6\u4e2d\u53ef\u89c1\u3002\u5168\u5c40\u53d8\u91cf\u662f\u5e94\u8be5\u7edd\u5bf9\u907f\u514d\u7684\uff0c\u5728 objc \u4e2d\uff0c\nextern\n \u7684\u5178\u578b\u7528\u6cd5\u6709\u4e0b\u9762\u4e24\u79cd\uff1a\n\n\n\n\n\u5168\u5c40\u5b57\u7b26\u4e32\u5e38\u91cf\n\n\n\n\n.h  extern NSString * const kAppErrorDomain;\n.m \ufffc\ufffcNSString * const kAppErrorDomain = @\u201ccom.example.yourapp.error\u201d\n\n\n\n\n\n\npublic \u51fd\u6570 \u4e00\u822c\u7528\u5728\u67d0\u4e9b\u5de5\u5177\u7c7b\uff0c\u53ef\u4ee5\u4f7f\u51fd\u6570\u5728\u5168\u5c40\u53ef\u7528\n\n\n\n\n\n\nattribute\n\n\nattribute\n \u662f\u7f16\u8bd1\u5668\u547d\u4ee4\uff0c\u7528\u6765\u5728\u58f0\u660e\u662f\u6307\u5b9a\u4e00\u4e9b\u7684\u7279\u6027\uff0c\u4e3b\u8981\u7528\u4e8e\u9519\u8bef\u68c0\u67e5\uff0c\u4f18\u5316\u548c\u63d0\u793a\u7b49\n\n\n\u8bed\u6cd5\u4e3a \n__attribute__\n \u540e\u7d27\u63a5\u4e24\u4e2a\u62ec\u53f7\uff0c\u5728\u91cc\u9762\u662f\u9017\u53f7\u5206\u9694\u7684\u5c5e\u6027\u3002\n\n\n\u5bf9\u4e8e GCC\n\n\nformat \u683c\u5f0f\u5316\u8f93\u51fa\n\n\nextern int my_printf (void *my_object, const char *my_format, \u2026) __attribute__((format(printf, 2, 3)));\n\n\n\n\nnonnull \u6307\u5b9a\u67d0\u4e9b\u8f93\u5165\u53c2\u6570\u4e0d\u5e94\u8be5\u662f NULL\n\n\nextern void *my_memcpy (void *dest, const void *src, size_t len)  __attribute__((nonnull (1, 2)));\n\n\n\n\nnoreturn\n\n\n\u65e0\u8fd4\u56de\uff0c\u7528\u5728\u629b\u51fa\u7b49\n\n\npure / const\n\n\npure\n \u7528\u5728\u9664\u4e86\u8fd4\u56de\u4ee5\u5916\uff0c\u5bf9\u7a0b\u5e8f\u6ca1\u6709\u5f71\u54cd\u7684\u51fd\u6570\u4e2d\u3002\u8fd4\u56de\u503c\u53ea\u4e0e\u8f93\u5165\u53c2\u6570\u4ee5\u53ca\u5168\u5c40\u53d8\u91cf\u6709\u5173\u3002\u7f16\u8bd1\u5668\u5c06\u5bf9\u5176\u8fdb\u884c\u7279\u6b8a\u4f18\u5316\u3002\nconst\n \u66f4\u8fdb\u4e00\u6b65\uff0c\u5c06\u53ea\u4e0e\u53c2\u6570\u6709\u5173\uff08\u800c\u4e14\u53c2\u6570\u4e2d\u4e0d\u80fd\u542b\u6709\u6307\u9488\uff09\uff0c\nconst\n \u7684\u51fd\u6570\u4e0d\u5e94\u8be5\u8fd4\u56de \nvoid\n\u3002\n\n\n\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\n\nint square(int n) __attribute__((const));\n\n\n\n\npure\n \u548c \nconst\n \u90fd\u5c06\u4f1a\u5728\u7f16\u8bd1\u65f6\u6709\u5927\u5e45\u4f18\u5316\uff0c\u6bd4\u5982\u7531\u4e8e\u51fd\u6570\u7684\u7ed3\u679c\u53ea\u4f9d\u8d56\u4e8e\u8f93\u5165\uff0c\u56e0\u6b64\u51fd\u6570\u53ef\u4ee5\u7f13\u5b58\u67d0\u4e00\u8f93\u5165\u7684\u7ed3\u679c\uff0c\u4ece\u800c\u518d\u6b21\u63a5\u53d7\u5230\u8fd9\u4e2a\u8f93\u5165\u662f\u8fc5\u901f\u8fd4\u56de\u3002\n\n\nunused\n\n\n\u9644\u52a0\u5728\u65b9\u6cd5\u4e0a\uff0c\u8868\u793a\u65b9\u6cd5\u5f88\u53ef\u80fd\u662f\u6ca1\u6709\u88ab\u4f7f\u7528\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b GCC \u5c06\u4e0d\u4f1a\u5bf9\u6b64\u65b9\u6cd5\u4ea7\u751f\u8b66\u544a\u3002\n\n\n\u5bf9\u4e8eLLVM\n\n\navailability\n\n\nvoid f(void) __attribute__((availability(macosx,introduced=10.4,deprecated=10.6,obsoleted=10.7)));\n\n\n\n\n\u6bd4\u8f83\u5e38\u89c1\u7684\u53ef\u7528\u6027 \nattribute\n\uff0c\u8bf4\u660e\u7248\u672c\u517c\u5bb9\u6027\u3002\u4e00\u822c\u53ef\u4ee5\u7528 Apple \u7684\u5b8f\u6765\u4ee3\u66ff\uff1a\n\n\n\u53ef\u4ee5\u53c2\u770b \n`/usr/include/\n \u7684 \nAvailability.h\n \u548c \nAvailabilityInternal.h\n\n\noverloadable\n\n\n\u7528C\u6765\u91cd\u8f7dC++\u7684\u65b9\u6cd5\u3002\u6bd4\u5982\n\n\n#include \nmath.h\n\nfloat __attribute__((overloadable)) tgsin(float x)\n{ return sinf(x); }\ndouble __attribute__((overloadable)) tgsin(double x)\n{ return sin(x); }\nlong double __attribute__((overloadable)) tgsin(long\ndouble x) { return sinl(x); }\n\n\n\n\n\n\n@\n\n\nobjc \u8bed\u6cd5\u4e09\u5927\u7279\u70b9\uff1a\u65b9\u62ec\u53f7\uff0c\u8d85\u7ea7\u957f\u7684\u51fd\u6570\u540d\uff0c@ \u7b26\u53f7\n\n\nInterface \n Implementation\n\n\n@interface\u2026@end\n@implementation\u2026@end\n\n\n\n\nProperties\n\n\n@property\n@synthesize\n@dynamic\n\n\n\n\nForward Class Declarations\n\n\n@class\n\n\n\n\nInstance Variable Visibility\n\n\n@public\n@package\n@protected\n@private\n\n\n\n\nProtocols\n\n\n@protocol\u2026@end\n\n\n\n\nRequirement Options\n\n\n@required and @optional\n\n\n\n\nException Handling\n\n\n@try\u2026@catch\u2026@finally \n\n\n\n\nLiterals\n\n\nObject\n\n\n\n\n\n\n\n\nType\n\n\nSyntax\n\n\n\n\n\n\n\n\n\n\nNSString\n\n\n@\u201c\u201d\n\n\n\n\n\n\nNSNumber\n\n\n@42, @3.14, @YES, @\u2018Z\u2019\n\n\n\n\n\n\nNSArray\n\n\n@[]\n\n\n\n\n\n\nNSDictionary\n\n\n@{}\n\n\n\n\n\n\nDynamically evaluates\n\n\n@()\n\n\n\n\n\n\n\n\n\u5173\u4e8e\u81ea\u5b9a\u4e49Literals\uff0c\u53ef\u4ee5\u53c2\u770b\n\u8fd9\u91cc\n\n\n\n\n\n\nObjc\n\n\n@selector() -\n  -performSelector:withObject:\n\n\n@protocol() -\n -conformsToProtocol:\n\n\n\n\n\n\nC\n\n\n@encode() \u8fd4\u56de\u4e00\u4e2a type \u7684 type encoding\uff0c\u8fd9\u4e2a\u503c\u7528\u4e8e encodeValuesOfObjCTypes:\n\n\n@defs() \u8fd4\u56de objc \u7c7b\u7684 layout\u3002 \u6bd4\u5982\u5b9a\u4e49\u4e00\u4e2a\u548c NSObject \u6709\u76f8\u540c field \u7684\u7c7b\uff0c\u53ef\u4ee5\u5199\u6210\n\n\n\n\n\n\nstruct {\n    @defs(NSObject)\n}\n\n\n\n\n\u73b0\u5728\u7684 objc runtime \u4e2d \n@defs\n \u5df2\u7ecf\u4e0d\u53ef\u7528\u4e86\n\n\nOptimizations\n\n\n\n\n@autoreleasepool{} \u5feb\u901f\u7684\u56de\u6536\u6c60\uff0c\u5728 ARC \u65f6\u4ee3 NSAutoreleasePool \u5df2\u7ecf\u88ab\u6dd8\u6c70\n\n\n@synchronized(){} \u5bf9\u67d0\u4e2a\u5757\u5728\u4e0a\u4e0b\u6587\uff08\u901a\u5e38\u662f self\uff09\u4e2d\u505a\u5b89\u5168\u6267\u884c\u3002\u7528\u8fd9\u79cd\u65b9\u5f0f\u9501\u5b9a\u7ebf\u7a0b\u662f expensive \u7684\uff0c\u5bf9\u4e8e\u7ebf\u7a0b\u5b89\u5168\u6765\u8bf4\uff0c\u63a8\u8350\u4f7f\u7528 NSLock \u6216\u8005\u4f4e\u5c42\u7ea7\u7684 locking \u65b9\u6cd5\uff0c\u6bd4\u5982 \nOSAtomicCompareAndSwap32(3)\n\n\n\n\nCompatibility\n\n\n@compatibility_alias\n \u5141\u8bb8\u4e00\u4e2a\u73b0\u6709\u7684\u7c7b\u88ab alias \u4e3a\u4e00\u4e2a\u53e6\u5916\u7684\u540d\u5b57\uff0c\u4e00\u822c\u7528\u5728\u517c\u5bb9\u6027\u4e2d\u3002\n\n\n\n\ninstancetype\n\n\nalloc\n \u548c \ninit\n \u5c06\u8fd4\u56de\u6240\u53d1\u9001\u7c7b\u7684\u5b9e\u4f8b\uff0c\u8fd9\u662f\u547d\u540d\u89c4\u8303\u3002\u4f46\u662f\u5bf9\u4e8e\u7c7b\u7684 construtor \u65b9\u6cd5\uff0c\u540c\u6837\u65e0\u6cd5\u4ece\u7c7b\u578b\u68c0\u67e5\u4e2d\u53d7\u76ca\u3002\u4f8b\u5982\n\n\n[[[NSArray alloc] init] mediaPlaybackAllowsAirPlay]; \n// ! \u201cNo visible @interface for `NSArray` declares the selector `mediaPlaybackAllowsAirPlay`\u201d!\n[[NSArray array] mediaPlaybackAllowsAirPlay];\n// (No error)\n\n\n\n\n\u4f7f\u7528 \ninstancetype\n \u5173\u952e\u5b57\uff0c\u53ef\u4ee5\u9488\u5bf9\u4e0a\u4e0b\u6587\u7ed9\u51fa\u5408\u9002\u7684\u8fd4\u56de\u7c7b\u578b\u3002\n\n\n\n\nNS_ENUM \n NS_OPTIONS\n\n\n\u5728 iOS6 \u4e4b\u540e\uff0c\u63a8\u8350\u4f7f\u7528 \nNS_ENUM\n \u548c \nNS_OPTIONS\n \u6765\u8fdb\u884c\u5b9a\u4e49\u3002\n\n\nNS_ENUM\n\n\n\u51e0\u79cd enum \u7684\u5bf9\u6bd4\n\n\n\u6700\u57fa\u672c\u7684 enum\uff1a\n\n\nenum {\n    UITableViewCellStyleDefault,\n    UITableViewCellStyleValue1,\n    UITableViewCellStyleValue2,\n    UITableViewCellStyleSubtitle\n};\n\n\n\n\n\u6307\u5b9a\u6574\u6570\uff0c\u4f46\u662f\u65e0\u7c7b\u578b\uff1a\n\n\ntypedef enum {\n    UITableViewCellStyleDefault,\n    UITableViewCellStyleValue1,\n    UITableViewCellStyleValue2,\n    UITableViewCellStyleSubtitle\n} UITableViewCellStyle;\n\n\n\n\n\u6307\u5b9a\u6574\u6570\u4ee5\u53ca\u7c7b\u578b\uff1a\n\n\ntypedef NS_ENUM(NSInteger, UITableViewCellStyle) {\n    UITableViewCellStyleDefault,\n    UITableViewCellStyleValue1,\n    UITableViewCellStyleValue2,\n    UITableViewCellStyleSubtitle\n};\n\n\n\n\nNS_OPTIONS\n\n\n\u5728\u4f5c\u4e3a bitmask \u7684\u65f6\u5019\u4f7f\u7528\uff0c\u8bed\u6cd5\u548c \nNS_ENUM\n \u4e00\u6837\uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u4f1a\u4e3a\u6dfb\u52a0\u7ec4\u5408\u7684\u8b66\u544a\u3002\n\n\n\n\nNSOperation\n\n\nobjc \u4e2d\u4e00\u822c\u7684\u591a\u7ebf\u7a0b\u65b9\u5f0f GCD \u548c NSOperation\n\n\nNSOperation\n \u8868\u793a\u4e00\u4e2a\u5355\u4e00\u7684\u8ba1\u7b97\u5355\u5143\u3002\u5b83\u672c\u8eab\u662f abstract \u7684\uff0c\u4e3a\u5176\u5b50\u7c7b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u7528\u7684\u7ebf\u7a0b\u5b89\u5168\u7684\u73af\u5883\u3002\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5176\u5b50\u7c7b \nNSBlockOperation\n \u6765\u5b8c\u6210\u4e00\u7cfb\u5217\u5de5\u4f5c\u3002\n\n\nNSOperationQueue\n \u7528\u6765\u7ec4\u7ec7\u591a\u7ebf\u7a0b\u6267\u884c\u64cd\u4f5c\uff0c\u626e\u6f14\u4f18\u5148\u961f\u5217\u7684\u89d2\u8272\u3002\u8981\u5f00\u59cb\u67d0\u4e2a \nNSOperation\n\uff0c\u53ef\u4ee5\u5bf9\u5176\u53d1\u9001 \nstart\n \u65b9\u6cd5\uff0c\u6216\u8005\u5c06\u5176\u52a0\u5165\u4e00\u4e2a \nNSOperationQueue\n \u4e2d\u3002\n\n\nNSOperation\n \u7684\u72b6\u6001\u673a\u8f6c\u6362 \nisReady\n \u2192 \nisExecuting\n \u2192 \nisFinished\n\u3002\u4e00\u822c\u53ef\u4ee5\u901a\u8fc7 KVO \u6765\u5bf9\u72b6\u6001\u8f6c\u6362\u8fdb\u884c\u68c0\u6d4b\u3002\n\n\n\n\nNSDataDetector\n\n\nNSDataDetector\n \u662f \nNSRegularExpression\n \u7684\u5b50\u7c7b\u3002\u7528\u6765\u5339\u914d\u65e5\u671f\uff0c\u5730\u5740\uff0c\u94fe\u63a5\uff0c\u7535\u8bdd\u53f7\u7801\u548c\u6362\u4e58\u4fe1\u606f\u7b49\u3002\n\n\nNSError *error = nil;\nNSDataDetector *detector = [NSDataDetector dataDetectorWithTypes:NSTextCheckingTypeAddress | NSTextCheckingTypePhoneNumber error:\nerror];\n\nNSString *string = @\u201c123 Main St. / (555) 555-5555\u201d;\n[detector enumerateMatchesInString:string\n                           options:kNilOptions\n                             range:NSMakeRange(0, [string length])\n                        usingBlock:^(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop)\n {\n     NSLog(@\u201cMatch: %@\u201c, result);\n }];\n\n\n\n\niOS \u7248\u672c\u6709\u4e00\u4e2a \nUIDataDetectorTypes\n\n\n\u53e6\u5916\u5728\u5c06\u81ea\u7136\u8bed\u8a00\u7ffb\u8bd1\u4e3a\u7ed3\u6784\u5316\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 linguistic \u76f8\u5173API (\u53ef\u4ee5\u53c2\u770b\n\u8fd9\u91cc\n)\n\n\n\n\nNSCache\n\n\nNSCache\n \u7ecf\u5e38\u88ab\u76f4\u63a5\u7528\u4e00\u4e2a Dictionary \u66ff\u4ee3\uff0c\u5bf9\u4e8e \nNSCache\n \u5176\u5b9e\u662f\u5e94\u8be5\u5728\u5408\u9002\u7684\u573a\u666f\u7ecf\u5e38\u4f7f\u7528\u7684\n\n\nkey \u4e0d\u88ab copy\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u6ee1\u8db3 \nNSCopying\n\n\n\u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3c\u5b57\u5178\uff0c\u53c2\u770b\n\u8fd9\u91cc\n\n\n// Your cache should have a lifetime beyond the method or handful of methods\n// that use it. For example, you could make it a field of your application\n// delegate, or of your view controller, or something like that. Up to you.\nNSCache *myCache = \u2026;\nNSAssert(myCache != nil, @\u201ccache object is missing\u201d);\n\n// Try to get the existing object out of the cache, if it\u2019s there.\nWidget *myWidget = [myCache objectForKey: @\u201cImportant Widget\u201d];\nif (!myWidget) {\n    // It\u2019s not in the cache yet, or has been removed. We have to\n    // create it. Presumably, creation is an expensive operation,\n    // which is why we cache the results. If creation is cheap, we\n    // probably don\u2019t need to bother caching it. That\u2019s a design\n    // decision you\u2019ll have to make yourself.\n    myWidget = [[[Widget alloc] initExpensively] autorelease];\n\n    // Put it in the cache. It will stay there as long as the OS\n    // has room for it. It may be removed at any time, however,\n    // at which point we\u2019ll have to create it again on next use.\n    [myCache setObject: myWidget forKey: @\u201cImportant Widget\u201d];\n}\n\n// myWidget should exist now either way. Use it here.\nif (myWidget) {\n    [myWidget runOrWhatever];\n}\n\n\n\n\n\n\nCFBag\n\n\nCFBag\n \u4e0e \nNSCountedSet\n \u6709\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u4f46\u662f\u5e76\u4e0d\u662f toll-free \u7684\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\n\n\n\u4e00\u822c\u6765\u8bf4 \nNSCountedSet\n\uff08\u5e26\u6709\u7edf\u8ba1\u6b21\u6570\u7684set\uff09\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4f7f\u7528\u7684\u53ef\u80fd\u4e0d\u591a\uff0c\u4f46\u662f\u5176\u5b9e\u5bf9\u4e8e\u67d0\u4e9b\u573a\u666f\u8fd8\u662f\u6bd4\u8f83\u6709\u7528\u7684\u3002\n\n\n\u5bf9\u4e8e\u9ad8\u5ea6\u5b9a\u5236\uff0c\u53ef\u4ee5\u4f7f\u7528 \nCFMutableBag\n \u548c\u5b83\u7684\u5404\u79cd callback\n\n\nstruct CFBagCallBacks {\n   CFIndex version;\n   CFBagRetainCallBack retain;\n   CFBagReleaseCallBack release;\n   CFBagCopyDescriptionCallBack copyDescription;\n   CFBagEqualCallBack equal;\n   CFBagHashCallBack \ntypedef struct CFBagCallBacks CFBagCallBacks;\n\n\n\n\n\n\nNSValueTransformer\n\n\n\u5c06\u4e00\u4e2a\uff08\u7c7b\uff09value \u8f6c\u6362\u4e3a\u53e6\u4e00\u7c7b\u7684\u7c7b\uff0c\u672c\u8eab\u662f abstract \u7684\n\n\niOS \u4e2d\u4e0d\u592a\u4f7f\u7528 \nNSValueTransformer\n \u7684\u539f\u56e0\u662f\u6ca1\u6709 binding\uff0c\u5e76\u4e14\u73b0\u6709\u7684 block \u7b49\u5df2\u7ecf\u4f7f\u80f6\u6c34\u4ee3\u7801\u7684\u6570\u91cf\u5927\u5927\u964d\u4f4e\n\n\n\u4e00\u4e2a\u7b80\u5355\u4f8b\u5b50\n\n\n@interface ClassNameTransformer: NSValueTransformer {}\n@end\n\n#pragma mark -\n\n@implementation ClassNameTransformer\n+ (Class)transformedValueClass {\n  return [NSString class];\n}\n\n+ (BOOL)allowsReverseTransformation {\n    return NO;\n}\n\n- (id)transformedValue:(id)value {\n    return (value == nil) ? nil : NSStringFromClass([value class]);\n}\n@end\n\n\n\n\n\n\nNSExpression\n\n\nNSPredicate\n \u5176\u5b9e\u662f\u7531\u4e24\u4e2a \nNSExpression\n \u7684\u5de6\u503c\u548c\u53f3\u503c\u4e24\u90e8\u5206\u6784\u6210\uff0c\u4e2d\u95f4\u4f7f\u7528\u64cd\u4f5c\u7b26\u94fe\u63a5\uff08\u6bd4\u5982 \n IN LIKE \u4e4b\u7c7b\uff09\n\n\n\u4f46\u662f\u5927\u591a\u6570\u5f00\u53d1\u8005\u4f7f\u7528 \nNSPredicate\n \u7684 \n+predicateWithFormat:`` \u65b9\u6cd5\u6765\u6784\u5efa predicate\uff0c\u56e0\u6b64\nNSExpression` \u5f88\u5c11\u7528\u3002\u4f46\u662f\u5176\u5b9e\u5b83\u5f88\u5f3a\u529b\n\n\n\u6570\u5b66\u8ba1\u7b97\n\n\nNSExpression *expression = [NSExpression expressionWithFormat:@\u201c4 + 5 - 2**3\u201d];\nid value = [expression expressionValueWithObject:nil  context:nil]; \n// 1\n\n\n\n\n\u4e00\u884c\u641e\u5b9a\u8ba1\u7b97\u5668app\n\n\n\u51fd\u6570\n\n\nNSArray *numbers = @[@1, @2, @3, @4, @4, @5, @9, @11];\nNSExpression *expression = \n[NSExpression expressionForFunction:@\u201cstddev:\u201d \n                          arguments:@[[NSExpression \n         expressionForConstantValue:numbers]]];\n\u00a0\nid value =  [expression expressionValueWithObject:nil context:nil]; \n// 3.21859\u2026\n\n\n\n\n\u7edf\u8ba1\u5b66\n\n\n\n\naverage:\n\n\nsum:\n\n\ncount:\n\n\nmin:\n\n\nmax:\n\n\nmedian:\n\n\nmode:\n\n\nstddev:\n\n\n\n\n\u57fa\u672c\u7b97\u6570\n\n\n\n\nadd:to:\n\n\nfrom:subtract:\n\n\nmultiply:by:\n\n\ndivide:by:\n\n\nmodulus:by:\n\n\nabs:\n\n\n\n\n\u9ad8\u7ea7\u7b97\u6570\n\n\n\n\nsqrt:\n\n\nlog:\n\n\nln:\n\n\nraise:toPower:\n\n\nexp:\n\n\n\n\n\u8fb9\u754c\u65b9\u6cd5\n\n\n\n\nceiling\n\n\ntrunc\n\n\n\n\n\u968f\u673a\n\n\n\n\nrandom  \u7b49\u540c\u4e8erand(3)\n\n\nrandom: \u4ecearray\u4e2d\u9009\u4e00\u4e2a\u968f\u673a\u5143\u7d20\n\n\n\n\n\u4e8c\u8fdb\u5236\u8fd0\u7b97\n\n\n\n\nbitwiseAnd:with:\n\n\nbitwiseOr:with:\n\n\nbitwiseXor:with:\n\n\nleftshift:by:\n\n\nrightshift:by:\n\n\nonesComplement:\n\n\n\n\n\u65e5\u671f\n\n\n\n\nnow\n\n\n\n\n\u5b57\u7b26\u4e32\n\n\n\n\nlowercase:\n\n\nuppercase:\n\n\n\n\n\n\nNSFileManager\n\n\n\u5bf9\u4e8e\u4e00\u822c\u9700\u6c42\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a \ncategory\n\n\n\u5f88\u591a\u4ee3\u7801\u7247\u6bb5\u793a\u4f8b\n\n\n\n\nDetermining If A File Exists\n\n\nListing All Files In A Directory\n\n\nRecursively Enumerating Files In A Directory\n\n\nCreating a Directory\n\n\nDeleting a File\n\n\nDetermining the Creation Date of a File\n\n\nMoving an Item to Ubiquitous Storage\n\n\n\n\n\u7b49\u7b49\u3002\u3002\n\n\n\n\nNSValue\n\n\n\u4f5c\u4e3a\u6807\u91cf\u503c\u7684 boxing\uff0c\u4f7f\u7528 \nNSValue\n \u5c06\u6807\u91cf\u503c\u8fdb\u884c\u5c01\u88c5\u3002\u4e00\u822c\u7528\u4e8e\u5c06\u6807\u91cf\u503c\u63d2\u5165\u5230 collection \u4e2d\u65f6\u4f7f\u7528\u3002\n\n\n\u4f7f\u7528\u4f8b\u5b50\n\n\n// assume ImaginaryNumber defined:\ntypedef struct {\n    float real;\n    float imaginary;\n} ImaginaryNumber;\n\n\nImaginaryNumber miNumber;\nmiNumber.real = 1.1;\nmiNumber.imaginary = 1.41;\n\nNSValue *miValue = [NSValue valueWithBytes: \nmiNumber\n                            withObjCType:@encode(ImaginaryNumber)];\n\nImaginaryNumber miNumber2;\n[miValue getValue:\nmiNumber2];", 
            "title": "NSHipster"
        }, 
        {
            "location": "/nshipster/#nshipster", 
            "text": "", 
            "title": "NSHipster"
        }, 
        {
            "location": "/nshipster/#pragma", 
            "text": "pragma \u7684\u539f\u59cb\u76ee\u7684\u662f\u4f7f\u6e90\u4ee3\u7801\u9002\u914d\u591a\u79cd\u7f16\u8bd1\u5668\uff0c\u4f46\u662f\u73b0\u9636\u6bb5\u66f4\u591a\u65f6\u5019\u7528\u4e8e\u5206\u5272\u4ee3\u7801\uff0c\u589e\u52a0\u53ef\u8bfb\u6027\u3002\u7c7b\u4f3c\u7528\u6cd5  #pragma mark - UIViewController\n- (void)viewDidLoad {\n}\n\n#pragma mark - IBAction\n- (IBAction)cancel:(id)sender {\n}  \u5c06\u5728\u4ee3\u7801\u5757\u8df3\u8f6c\u7684\u4e0b\u62c9pop\u4e2d\u751f\u6210\u6a2a\u7ebf\u548c\u540d\u5b57\uff0c\u4fbf\u4e8e\u67e5\u627e\u4ee3\u7801  \u53e6\u5916 #pragma \u591a\u7528\u4e8e\u4e34\u65f6\u7981\u7528\u6216\u8005\u542f\u7528\u4e00\u4e9b\u8b66\u544a\uff0c\u6bd4\u5982  #pragma clang diagnostic push\n#pragma clang diagnostic ignored \u201c-Warc-retain-cycles\u201d\n    self.completionBlock = ^ {\n\n    };\n#pragma clang diagnostic pop  \u5173\u4e8e\u8b66\u544a\uff0c\u66f4\u591a\u53ef\u53c2\u770b \u8fd9\u91cc  \u4ee5\u53ca \u8fd9\u91cc  \u53e6\u5916\u8fd8\u6709  Which Clang Warning Is Generating This Message?", 
            "title": "#pragma"
        }, 
        {
            "location": "/nshipster/#bool-bool-boolean-nscfboolean", 
            "text": "objc \u4e2d\u4e00\u822c\u4f7f\u7528 BOOL \u505a\u771f\u5047\u5224\u65ad\u3002\u5fc5\u987b\u6ce8\u610f BOOL \u5728 objc \u4e2d\u662f\u88ab typedef \u4e3a signed char \u7684\uff0c\u56e0\u6b64\u5728\u6bd4\u8f83\u65f6\u4e0d\u5efa\u8bae\u4f7f\u7528 BOOLValue == YES \u6216\u8005 NO \u4e4b\u7c7b\u7684\u5199\u6cd5\u3002\u53e6\u5916\u5728\u8fd4\u56de\u4e00\u4e2a BOOL \u503c\u65f6\uff0c\u4e5f\u4e00\u5b9a\u8fdb\u884c\u6761\u4ef6\u5316\u540e\u518d\u8fdb\u884c\u8fd4\u56de\u3002  \u9519\u8bef\u7528\u4f8b  static BOOL different (int a, int b) {\n    return a - b;\n}\n\nif (different(11, 10) == YES) {\n  printf (\u201c11 != 10\\n\u201d);\n} else {\n  printf (\u201c11 == 10\\n\u201d);\n}!\nif (different(10, 11) == YES) {\n  printf (\u201c10 != 11\\n\u201d);\n} else {\n  printf (\u201c10 == 11\\n\u201d);\n}!\nif (different(512, 256) == YES) {\n  printf (\u201c512 != 256\\n\u201d);\n} else {\n  printf (\u201c512 == 256\\n\u201d);\n}  \u8f93\u51fa\u4e3a\uff1a  11 != 10\n10 == 11\n512 == 256  make no sense!  @(YES)  \u5f97\u5230\u7684\u662f\u4e00\u4e2a  __NSCFBoolean \uff0c\u8fd9\u662f  NSNumber  \u7684 class cluster \u7684\u4e00\u4e2a\u79c1\u6709\u7c7b\u3002\u5173\u4e8e class cluster \u7684\u66f4\u591a\uff0c\u53ef\u4ee5\u53c2\u8003  Apple \u6587\u6863", 
            "title": "BOOL / bool / Boolean / NSCFBoolean"
        }, 
        {
            "location": "/nshipster/#nil-nil-null-nsnull", 
            "text": "C \u8bed\u8a00   \u5bf9\u4e8e\u7a7a\u539f\u59cb\u503c 0    \u5bf9\u4e8e\u7a7a\u6307\u9488NULL   Objective-C \u5728 C \u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86    nil - \u7a7a\u5bf9\u8c61  Nil - \u7a7a\u7c7b\u548c   NSNull - \u5b9e\u9645\u7684\u4e00\u4e2a\u5bf9\u8c61   \u4efb\u4f55\u5bf9 nil \u53d1\u9001\u7684\u6d88\u606f\u90fd\u4f1a\u8fd4\u56de 0 \u503c\uff0cobjc \u5f88\u72ec\u7279\u7684\u4e00\u4e2a\u70b9  NSArray \u548c NSDictionary \u4e0d\u80fd\u5b58\u50a8 nil\uff0c\u56e0\u6b64\u4f7f\u7528 NSNull \u5bf9\u8c61\u6765\u8fdb\u884c\u8868\u793a     Type  What  Detail      NULL  (void *)0  literal null value for C pointers    nil  (id)0  literal null value for Objective-C objects    Nil  (Class)0  literal null value for Objective-C classes    NSNull  [NSNull null]  singleton object used to represent null     iOS 7 SDK\u4e2d\u5173\u4e8e\u8fd9\u4e9b\u7684\u5b9a\u4e49  MacTypes.h\n#ifndef NULL\n#define NULL    __DARWIN_NULL\n#endif /* ! NULL */\n#ifndef nil\n    #define nil NULL\n#endif /* ! nil */\n\nobjc.h\ndefine Nil __DARWIN_NULL\n\n_types.h\n#ifdef __cplusplus\n    #ifdef __GNUG__\n        #define __DARWIN_NULL __null\n    #else /* ! __GNUG__ */\n        #ifdef __LP64__\n            #define __DARWIN_NULL (0L)\n        #else /* !__LP64__ */\n            #define __DARWIN_NULL 0\n        #endif /* __LP64__ */\n    #endif /* __GNUG__ */\n#else /* ! __cplusplus */\n    #define __DARWIN_NULL ((void *)0)\n#endif /* __cplusplus */", 
            "title": "nil / Nil /  NULL / NSNull"
        }, 
        {
            "location": "/nshipster/#equality", 
            "text": "\u76f4\u63a5\u5bf9\u5bf9\u8c61\u8fdb\u884c == \u64cd\u4f5c\u7b26\u8fd0\u7b97\u8868\u793a\u6bd4\u8f83\u6307\u9488\u662f\u5426\u76f8\u7b49\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0bNSObject\u7684-isEqual:\u65b9\u6cd5\u4e5f\u662f\u6bd4\u8f83\u6307\u9488\u76f8\u7b49\u3002  \u5bf9\u4e8e\u7279\u5b9a\u7684NSObject\u7c7b\uff0c\u4e00\u822c\u4f1a\u5b58\u5728\u7279\u5b9a\u7684\u5224\u7b49\u65b9\u6cd5\uff0c\u5982     Class  Method      NSAttributedString  -isEqualToAttributedString:    NSData  -isEqualToData:    NSDate  -isEqualToDate:    NSDictionary  -isEqualToDictionary:    NSHashTable  -isEqualToHashTable:    NSIndexSet  -isEqualToIndexSet:    NSNumber  -isEqualToNumber:    NSOrderedSet  -isEqualToOrderedSet:    NSSet  -isEqualToSet:    NSString  -isEqualToString:    NSTimeZone  -isEqualToTimeZone:    NSValue  -isEqualToValue:     \u5bf9\u4e8e\u81ea\u5b9a\u4e49\u7684\u5224\u7b49\uff0c\u4e00\u822c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u81ea\u5df1\u7684  -isEqualXXX:  \u65b9\u6cd5\u6765\u6bd4\u8f83\u67d0\u4e9b\u611f\u5174\u8da3\u7684\u5c5e\u6027\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u91cd\u8f7d  -isEqual: \uff0c\u4f46\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5bf9\u4e8e  -hash  \u4e5f\u8fdb\u884c\u91cd\u8f7d\u53ef\u4ee5\u6709\u6548\u63d0\u9ad8\u6563\u5217\u6548\u7387\u3002  \u5728\u5b9e\u73b0  isEqual:  \u548c  hash  \u7684\u91cd\u8f7d\u65f6\uff0c\u6ce8\u610f\uff1a  Object equality is commutative \u2028 ([a isEqual:b] \u21d2 [b isEqual:a])  If objects are equal, their hash values must also be equal \u2028 ([a isEqual:b] \u21d2 [a hash] == [b hash])  However, the converse does not hold: two objects need not be equal in order for their hash values to be equal \n([a hash] == [b hash] \u00ac\u21d2 [a isEqual:b])", 
            "title": "Equality"
        }, 
        {
            "location": "/nshipster/#c-storage-classes", 
            "text": "auto  C \u4e2d\u9ed8\u8ba4\u7684\u5b58\u50a8\u5173\u952e\u5b57\u3002\u81ea\u52a8\u5728\u7a0b\u5e8f\u8fdb\u5165\u5757\u65f6\u4e3a\u53d8\u91cf\u7533\u8bf7\u5185\u5b58\uff0c\u5e76\u4e14\u5728\u79bb\u5f00\u5757\u65f6\u8fdb\u884c\u91ca\u653e\u3002 auto  \u7684\u53d8\u91cf\u53ea\u5728\u5757\u4f5c\u7528\u57df\u4e2d\u6709\u6548\u3002  register  \u5728 NS \u7684\u4e16\u754c\u4e0d\u5e38\u7528\u3002\u548c  auto  \u7c7b\u4f3c\uff0c\u4f46\u662f\u53d8\u91cf\u4e0d\u4f1a\u5728\u6808\u4e0a\u88ab\u7533\u8bf7\uff0c\u800c\u4f1a\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\u3002\u5bc4\u5b58\u5668\u6bd4 RAM \u5feb\uff0c\u4f46\u662f\u524d\u63d0\u662f\u7ecf\u8fc7\u826f\u597d\u8bbe\u8ba1\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u6ee5\u7528\u5bc4\u5b58\u5668\u8fdb\u884c\u5b58\u50a8\u7ed3\u679c\u5f80\u5f80\u53ef\u80fd\u56e0\u4e3a\u4e0d\u5fc5\u8981\u5730\u5360\u7528\u5bc4\u5b58\u5668\u800c\u5bfc\u81f4\u53d8\u6162\u3002\u4f7f\u7528  register  \u5b9e\u9645\u4e0a\u53ea\u4f5c\u4e3a\u7f16\u8bd1\u5668\u7684\u53c2\u8003\uff0c\u5b9e\u9645\u4e0a\u7f16\u8bd1\u5668\u53ef\u80fd\u4e0d\u4f7f\u7528\u5bc4\u5b58\u5668\u3002  static  \u8fd9\u4e2a\u5173\u952e\u5b57\u7528\u4e8e\u5b58\u50a8\u65f6\uff0c\u6709\u4e24\u79cd\u542b\u4e49   \u5728\u65b9\u6cd5\u6216\u51fd\u6570\u4e2d\u7684static\u8868\u793a\u503c\u5728\u4e0d\u540c\u7684call\u4e2d\u4fdd\u6301\u4e00\u81f4\u3002  \u5168\u5c40\u58f0\u660e\u7684static\u53d8\u91cf\u53ef\u4ee5\u88ab\u4efb\u4f55\u65b9\u6cd5\u6216\u51fd\u6570\u53d6\u5230\u3002   \u5728 OC \u4e2d\uff0c\u4e00\u4e2a\u5e38\u7528  staic  \u7684\u5730\u65b9\u662f\u5355\u4f8b\u3002objc \u6700\u4f73\u7684\u5355\u4f8b\u5b9e\u8df5  + (instancetype)sharedInstance {\n    static id _sharedInstance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once( onceToken, ^{\n        _sharedInstance = [[self alloc] init]; \n    });\n    return _sharedInstance;\n}  \u7ebf\u7a0b\u5b89\u5168\uff0c\u5fc5\u5b9a\u53ea\u4f1a\u88ab call \u4e00\u6b21  extern  \u548c  static  \u4e0d\u540c\uff0c extern  \u58f0\u660e\u7684\u53d8\u91cf\u6216\u8005\u65b9\u6cd5\u53ef\u4ee5\u5728\u6240\u6709\u6587\u4ef6\u4e2d\u53ef\u89c1\u3002\u5168\u5c40\u53d8\u91cf\u662f\u5e94\u8be5\u7edd\u5bf9\u907f\u514d\u7684\uff0c\u5728 objc \u4e2d\uff0c extern  \u7684\u5178\u578b\u7528\u6cd5\u6709\u4e0b\u9762\u4e24\u79cd\uff1a   \u5168\u5c40\u5b57\u7b26\u4e32\u5e38\u91cf   .h  extern NSString * const kAppErrorDomain;\n.m \ufffc\ufffcNSString * const kAppErrorDomain = @\u201ccom.example.yourapp.error\u201d   public \u51fd\u6570 \u4e00\u822c\u7528\u5728\u67d0\u4e9b\u5de5\u5177\u7c7b\uff0c\u53ef\u4ee5\u4f7f\u51fd\u6570\u5728\u5168\u5c40\u53ef\u7528", 
            "title": "C Storage Classes"
        }, 
        {
            "location": "/nshipster/#attribute", 
            "text": "attribute  \u662f\u7f16\u8bd1\u5668\u547d\u4ee4\uff0c\u7528\u6765\u5728\u58f0\u660e\u662f\u6307\u5b9a\u4e00\u4e9b\u7684\u7279\u6027\uff0c\u4e3b\u8981\u7528\u4e8e\u9519\u8bef\u68c0\u67e5\uff0c\u4f18\u5316\u548c\u63d0\u793a\u7b49  \u8bed\u6cd5\u4e3a  __attribute__  \u540e\u7d27\u63a5\u4e24\u4e2a\u62ec\u53f7\uff0c\u5728\u91cc\u9762\u662f\u9017\u53f7\u5206\u9694\u7684\u5c5e\u6027\u3002  \u5bf9\u4e8e GCC  format \u683c\u5f0f\u5316\u8f93\u51fa  extern int my_printf (void *my_object, const char *my_format, \u2026) __attribute__((format(printf, 2, 3)));  nonnull \u6307\u5b9a\u67d0\u4e9b\u8f93\u5165\u53c2\u6570\u4e0d\u5e94\u8be5\u662f NULL  extern void *my_memcpy (void *dest, const void *src, size_t len)  __attribute__((nonnull (1, 2)));  noreturn  \u65e0\u8fd4\u56de\uff0c\u7528\u5728\u629b\u51fa\u7b49  pure / const  pure  \u7528\u5728\u9664\u4e86\u8fd4\u56de\u4ee5\u5916\uff0c\u5bf9\u7a0b\u5e8f\u6ca1\u6709\u5f71\u54cd\u7684\u51fd\u6570\u4e2d\u3002\u8fd4\u56de\u503c\u53ea\u4e0e\u8f93\u5165\u53c2\u6570\u4ee5\u53ca\u5168\u5c40\u53d8\u91cf\u6709\u5173\u3002\u7f16\u8bd1\u5668\u5c06\u5bf9\u5176\u8fdb\u884c\u7279\u6b8a\u4f18\u5316\u3002 const  \u66f4\u8fdb\u4e00\u6b65\uff0c\u5c06\u53ea\u4e0e\u53c2\u6570\u6709\u5173\uff08\u800c\u4e14\u53c2\u6570\u4e2d\u4e0d\u80fd\u542b\u6709\u6307\u9488\uff09\uff0c const  \u7684\u51fd\u6570\u4e0d\u5e94\u8be5\u8fd4\u56de  void \u3002  \u4e00\u4e2a\u4f8b\u5b50\uff1a  int square(int n) __attribute__((const));  pure  \u548c  const  \u90fd\u5c06\u4f1a\u5728\u7f16\u8bd1\u65f6\u6709\u5927\u5e45\u4f18\u5316\uff0c\u6bd4\u5982\u7531\u4e8e\u51fd\u6570\u7684\u7ed3\u679c\u53ea\u4f9d\u8d56\u4e8e\u8f93\u5165\uff0c\u56e0\u6b64\u51fd\u6570\u53ef\u4ee5\u7f13\u5b58\u67d0\u4e00\u8f93\u5165\u7684\u7ed3\u679c\uff0c\u4ece\u800c\u518d\u6b21\u63a5\u53d7\u5230\u8fd9\u4e2a\u8f93\u5165\u662f\u8fc5\u901f\u8fd4\u56de\u3002  unused  \u9644\u52a0\u5728\u65b9\u6cd5\u4e0a\uff0c\u8868\u793a\u65b9\u6cd5\u5f88\u53ef\u80fd\u662f\u6ca1\u6709\u88ab\u4f7f\u7528\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b GCC \u5c06\u4e0d\u4f1a\u5bf9\u6b64\u65b9\u6cd5\u4ea7\u751f\u8b66\u544a\u3002  \u5bf9\u4e8eLLVM  availability  void f(void) __attribute__((availability(macosx,introduced=10.4,deprecated=10.6,obsoleted=10.7)));  \u6bd4\u8f83\u5e38\u89c1\u7684\u53ef\u7528\u6027  attribute \uff0c\u8bf4\u660e\u7248\u672c\u517c\u5bb9\u6027\u3002\u4e00\u822c\u53ef\u4ee5\u7528 Apple \u7684\u5b8f\u6765\u4ee3\u66ff\uff1a  \u53ef\u4ee5\u53c2\u770b  `/usr/include/  \u7684  Availability.h  \u548c  AvailabilityInternal.h  overloadable  \u7528C\u6765\u91cd\u8f7dC++\u7684\u65b9\u6cd5\u3002\u6bd4\u5982  #include  math.h \nfloat __attribute__((overloadable)) tgsin(float x)\n{ return sinf(x); }\ndouble __attribute__((overloadable)) tgsin(double x)\n{ return sin(x); }\nlong double __attribute__((overloadable)) tgsin(long\ndouble x) { return sinl(x); }", 
            "title": "attribute"
        }, 
        {
            "location": "/nshipster/#_1", 
            "text": "objc \u8bed\u6cd5\u4e09\u5927\u7279\u70b9\uff1a\u65b9\u62ec\u53f7\uff0c\u8d85\u7ea7\u957f\u7684\u51fd\u6570\u540d\uff0c@ \u7b26\u53f7  Interface   Implementation  @interface\u2026@end\n@implementation\u2026@end  Properties  @property\n@synthesize\n@dynamic  Forward Class Declarations  @class  Instance Variable Visibility  @public\n@package\n@protected\n@private  Protocols  @protocol\u2026@end  Requirement Options  @required and @optional  Exception Handling  @try\u2026@catch\u2026@finally   Literals  Object     Type  Syntax      NSString  @\u201c\u201d    NSNumber  @42, @3.14, @YES, @\u2018Z\u2019    NSArray  @[]    NSDictionary  @{}    Dynamically evaluates  @()     \u5173\u4e8e\u81ea\u5b9a\u4e49Literals\uff0c\u53ef\u4ee5\u53c2\u770b \u8fd9\u91cc    Objc  @selector() -   -performSelector:withObject:  @protocol() -  -conformsToProtocol:    C  @encode() \u8fd4\u56de\u4e00\u4e2a type \u7684 type encoding\uff0c\u8fd9\u4e2a\u503c\u7528\u4e8e encodeValuesOfObjCTypes:  @defs() \u8fd4\u56de objc \u7c7b\u7684 layout\u3002 \u6bd4\u5982\u5b9a\u4e49\u4e00\u4e2a\u548c NSObject \u6709\u76f8\u540c field \u7684\u7c7b\uff0c\u53ef\u4ee5\u5199\u6210    struct {\n    @defs(NSObject)\n}  \u73b0\u5728\u7684 objc runtime \u4e2d  @defs  \u5df2\u7ecf\u4e0d\u53ef\u7528\u4e86  Optimizations   @autoreleasepool{} \u5feb\u901f\u7684\u56de\u6536\u6c60\uff0c\u5728 ARC \u65f6\u4ee3 NSAutoreleasePool \u5df2\u7ecf\u88ab\u6dd8\u6c70  @synchronized(){} \u5bf9\u67d0\u4e2a\u5757\u5728\u4e0a\u4e0b\u6587\uff08\u901a\u5e38\u662f self\uff09\u4e2d\u505a\u5b89\u5168\u6267\u884c\u3002\u7528\u8fd9\u79cd\u65b9\u5f0f\u9501\u5b9a\u7ebf\u7a0b\u662f expensive \u7684\uff0c\u5bf9\u4e8e\u7ebf\u7a0b\u5b89\u5168\u6765\u8bf4\uff0c\u63a8\u8350\u4f7f\u7528 NSLock \u6216\u8005\u4f4e\u5c42\u7ea7\u7684 locking \u65b9\u6cd5\uff0c\u6bd4\u5982  OSAtomicCompareAndSwap32(3)   Compatibility  @compatibility_alias  \u5141\u8bb8\u4e00\u4e2a\u73b0\u6709\u7684\u7c7b\u88ab alias \u4e3a\u4e00\u4e2a\u53e6\u5916\u7684\u540d\u5b57\uff0c\u4e00\u822c\u7528\u5728\u517c\u5bb9\u6027\u4e2d\u3002", 
            "title": "@"
        }, 
        {
            "location": "/nshipster/#instancetype", 
            "text": "alloc  \u548c  init  \u5c06\u8fd4\u56de\u6240\u53d1\u9001\u7c7b\u7684\u5b9e\u4f8b\uff0c\u8fd9\u662f\u547d\u540d\u89c4\u8303\u3002\u4f46\u662f\u5bf9\u4e8e\u7c7b\u7684 construtor \u65b9\u6cd5\uff0c\u540c\u6837\u65e0\u6cd5\u4ece\u7c7b\u578b\u68c0\u67e5\u4e2d\u53d7\u76ca\u3002\u4f8b\u5982  [[[NSArray alloc] init] mediaPlaybackAllowsAirPlay]; \n// ! \u201cNo visible @interface for `NSArray` declares the selector `mediaPlaybackAllowsAirPlay`\u201d!\n[[NSArray array] mediaPlaybackAllowsAirPlay];\n// (No error)  \u4f7f\u7528  instancetype  \u5173\u952e\u5b57\uff0c\u53ef\u4ee5\u9488\u5bf9\u4e0a\u4e0b\u6587\u7ed9\u51fa\u5408\u9002\u7684\u8fd4\u56de\u7c7b\u578b\u3002", 
            "title": "instancetype"
        }, 
        {
            "location": "/nshipster/#ns_enum-ns_options", 
            "text": "\u5728 iOS6 \u4e4b\u540e\uff0c\u63a8\u8350\u4f7f\u7528  NS_ENUM  \u548c  NS_OPTIONS  \u6765\u8fdb\u884c\u5b9a\u4e49\u3002  NS_ENUM  \u51e0\u79cd enum \u7684\u5bf9\u6bd4  \u6700\u57fa\u672c\u7684 enum\uff1a  enum {\n    UITableViewCellStyleDefault,\n    UITableViewCellStyleValue1,\n    UITableViewCellStyleValue2,\n    UITableViewCellStyleSubtitle\n};  \u6307\u5b9a\u6574\u6570\uff0c\u4f46\u662f\u65e0\u7c7b\u578b\uff1a  typedef enum {\n    UITableViewCellStyleDefault,\n    UITableViewCellStyleValue1,\n    UITableViewCellStyleValue2,\n    UITableViewCellStyleSubtitle\n} UITableViewCellStyle;  \u6307\u5b9a\u6574\u6570\u4ee5\u53ca\u7c7b\u578b\uff1a  typedef NS_ENUM(NSInteger, UITableViewCellStyle) {\n    UITableViewCellStyleDefault,\n    UITableViewCellStyleValue1,\n    UITableViewCellStyleValue2,\n    UITableViewCellStyleSubtitle\n};  NS_OPTIONS  \u5728\u4f5c\u4e3a bitmask \u7684\u65f6\u5019\u4f7f\u7528\uff0c\u8bed\u6cd5\u548c  NS_ENUM  \u4e00\u6837\uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u4f1a\u4e3a\u6dfb\u52a0\u7ec4\u5408\u7684\u8b66\u544a\u3002", 
            "title": "NS_ENUM &amp; NS_OPTIONS"
        }, 
        {
            "location": "/nshipster/#nsoperation", 
            "text": "objc \u4e2d\u4e00\u822c\u7684\u591a\u7ebf\u7a0b\u65b9\u5f0f GCD \u548c NSOperation  NSOperation  \u8868\u793a\u4e00\u4e2a\u5355\u4e00\u7684\u8ba1\u7b97\u5355\u5143\u3002\u5b83\u672c\u8eab\u662f abstract \u7684\uff0c\u4e3a\u5176\u5b50\u7c7b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u7528\u7684\u7ebf\u7a0b\u5b89\u5168\u7684\u73af\u5883\u3002\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5176\u5b50\u7c7b  NSBlockOperation  \u6765\u5b8c\u6210\u4e00\u7cfb\u5217\u5de5\u4f5c\u3002  NSOperationQueue  \u7528\u6765\u7ec4\u7ec7\u591a\u7ebf\u7a0b\u6267\u884c\u64cd\u4f5c\uff0c\u626e\u6f14\u4f18\u5148\u961f\u5217\u7684\u89d2\u8272\u3002\u8981\u5f00\u59cb\u67d0\u4e2a  NSOperation \uff0c\u53ef\u4ee5\u5bf9\u5176\u53d1\u9001  start  \u65b9\u6cd5\uff0c\u6216\u8005\u5c06\u5176\u52a0\u5165\u4e00\u4e2a  NSOperationQueue  \u4e2d\u3002  NSOperation  \u7684\u72b6\u6001\u673a\u8f6c\u6362  isReady  \u2192  isExecuting  \u2192  isFinished \u3002\u4e00\u822c\u53ef\u4ee5\u901a\u8fc7 KVO \u6765\u5bf9\u72b6\u6001\u8f6c\u6362\u8fdb\u884c\u68c0\u6d4b\u3002", 
            "title": "NSOperation"
        }, 
        {
            "location": "/nshipster/#nsdatadetector", 
            "text": "NSDataDetector  \u662f  NSRegularExpression  \u7684\u5b50\u7c7b\u3002\u7528\u6765\u5339\u914d\u65e5\u671f\uff0c\u5730\u5740\uff0c\u94fe\u63a5\uff0c\u7535\u8bdd\u53f7\u7801\u548c\u6362\u4e58\u4fe1\u606f\u7b49\u3002  NSError *error = nil;\nNSDataDetector *detector = [NSDataDetector dataDetectorWithTypes:NSTextCheckingTypeAddress | NSTextCheckingTypePhoneNumber error: error];\n\nNSString *string = @\u201c123 Main St. / (555) 555-5555\u201d;\n[detector enumerateMatchesInString:string\n                           options:kNilOptions\n                             range:NSMakeRange(0, [string length])\n                        usingBlock:^(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop)\n {\n     NSLog(@\u201cMatch: %@\u201c, result);\n }];  iOS \u7248\u672c\u6709\u4e00\u4e2a  UIDataDetectorTypes  \u53e6\u5916\u5728\u5c06\u81ea\u7136\u8bed\u8a00\u7ffb\u8bd1\u4e3a\u7ed3\u6784\u5316\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 linguistic \u76f8\u5173API (\u53ef\u4ee5\u53c2\u770b \u8fd9\u91cc )", 
            "title": "NSDataDetector"
        }, 
        {
            "location": "/nshipster/#nscache", 
            "text": "NSCache  \u7ecf\u5e38\u88ab\u76f4\u63a5\u7528\u4e00\u4e2a Dictionary \u66ff\u4ee3\uff0c\u5bf9\u4e8e  NSCache  \u5176\u5b9e\u662f\u5e94\u8be5\u5728\u5408\u9002\u7684\u573a\u666f\u7ecf\u5e38\u4f7f\u7528\u7684  key \u4e0d\u88ab copy\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u6ee1\u8db3  NSCopying  \u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3c\u5b57\u5178\uff0c\u53c2\u770b \u8fd9\u91cc  // Your cache should have a lifetime beyond the method or handful of methods\n// that use it. For example, you could make it a field of your application\n// delegate, or of your view controller, or something like that. Up to you.\nNSCache *myCache = \u2026;\nNSAssert(myCache != nil, @\u201ccache object is missing\u201d);\n\n// Try to get the existing object out of the cache, if it\u2019s there.\nWidget *myWidget = [myCache objectForKey: @\u201cImportant Widget\u201d];\nif (!myWidget) {\n    // It\u2019s not in the cache yet, or has been removed. We have to\n    // create it. Presumably, creation is an expensive operation,\n    // which is why we cache the results. If creation is cheap, we\n    // probably don\u2019t need to bother caching it. That\u2019s a design\n    // decision you\u2019ll have to make yourself.\n    myWidget = [[[Widget alloc] initExpensively] autorelease];\n\n    // Put it in the cache. It will stay there as long as the OS\n    // has room for it. It may be removed at any time, however,\n    // at which point we\u2019ll have to create it again on next use.\n    [myCache setObject: myWidget forKey: @\u201cImportant Widget\u201d];\n}\n\n// myWidget should exist now either way. Use it here.\nif (myWidget) {\n    [myWidget runOrWhatever];\n}", 
            "title": "NSCache"
        }, 
        {
            "location": "/nshipster/#cfbag", 
            "text": "CFBag  \u4e0e  NSCountedSet  \u6709\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u4f46\u662f\u5e76\u4e0d\u662f toll-free \u7684\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f  \u4e00\u822c\u6765\u8bf4  NSCountedSet \uff08\u5e26\u6709\u7edf\u8ba1\u6b21\u6570\u7684set\uff09\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4f7f\u7528\u7684\u53ef\u80fd\u4e0d\u591a\uff0c\u4f46\u662f\u5176\u5b9e\u5bf9\u4e8e\u67d0\u4e9b\u573a\u666f\u8fd8\u662f\u6bd4\u8f83\u6709\u7528\u7684\u3002  \u5bf9\u4e8e\u9ad8\u5ea6\u5b9a\u5236\uff0c\u53ef\u4ee5\u4f7f\u7528  CFMutableBag  \u548c\u5b83\u7684\u5404\u79cd callback  struct CFBagCallBacks {\n   CFIndex version;\n   CFBagRetainCallBack retain;\n   CFBagReleaseCallBack release;\n   CFBagCopyDescriptionCallBack copyDescription;\n   CFBagEqualCallBack equal;\n   CFBagHashCallBack \ntypedef struct CFBagCallBacks CFBagCallBacks;", 
            "title": "CFBag"
        }, 
        {
            "location": "/nshipster/#nsvaluetransformer", 
            "text": "\u5c06\u4e00\u4e2a\uff08\u7c7b\uff09value \u8f6c\u6362\u4e3a\u53e6\u4e00\u7c7b\u7684\u7c7b\uff0c\u672c\u8eab\u662f abstract \u7684  iOS \u4e2d\u4e0d\u592a\u4f7f\u7528  NSValueTransformer  \u7684\u539f\u56e0\u662f\u6ca1\u6709 binding\uff0c\u5e76\u4e14\u73b0\u6709\u7684 block \u7b49\u5df2\u7ecf\u4f7f\u80f6\u6c34\u4ee3\u7801\u7684\u6570\u91cf\u5927\u5927\u964d\u4f4e  \u4e00\u4e2a\u7b80\u5355\u4f8b\u5b50  @interface ClassNameTransformer: NSValueTransformer {}\n@end\n\n#pragma mark -\n\n@implementation ClassNameTransformer\n+ (Class)transformedValueClass {\n  return [NSString class];\n}\n\n+ (BOOL)allowsReverseTransformation {\n    return NO;\n}\n\n- (id)transformedValue:(id)value {\n    return (value == nil) ? nil : NSStringFromClass([value class]);\n}\n@end", 
            "title": "NSValueTransformer"
        }, 
        {
            "location": "/nshipster/#nsexpression", 
            "text": "NSPredicate  \u5176\u5b9e\u662f\u7531\u4e24\u4e2a  NSExpression  \u7684\u5de6\u503c\u548c\u53f3\u503c\u4e24\u90e8\u5206\u6784\u6210\uff0c\u4e2d\u95f4\u4f7f\u7528\u64cd\u4f5c\u7b26\u94fe\u63a5\uff08\u6bd4\u5982   IN LIKE \u4e4b\u7c7b\uff09  \u4f46\u662f\u5927\u591a\u6570\u5f00\u53d1\u8005\u4f7f\u7528  NSPredicate  \u7684  +predicateWithFormat:`` \u65b9\u6cd5\u6765\u6784\u5efa predicate\uff0c\u56e0\u6b64 NSExpression` \u5f88\u5c11\u7528\u3002\u4f46\u662f\u5176\u5b9e\u5b83\u5f88\u5f3a\u529b  \u6570\u5b66\u8ba1\u7b97  NSExpression *expression = [NSExpression expressionWithFormat:@\u201c4 + 5 - 2**3\u201d];\nid value = [expression expressionValueWithObject:nil  context:nil]; \n// 1  \u4e00\u884c\u641e\u5b9a\u8ba1\u7b97\u5668app  \u51fd\u6570  NSArray *numbers = @[@1, @2, @3, @4, @4, @5, @9, @11];\nNSExpression *expression = \n[NSExpression expressionForFunction:@\u201cstddev:\u201d \n                          arguments:@[[NSExpression \n         expressionForConstantValue:numbers]]];\n\u00a0\nid value =  [expression expressionValueWithObject:nil context:nil]; \n// 3.21859\u2026  \u7edf\u8ba1\u5b66   average:  sum:  count:  min:  max:  median:  mode:  stddev:   \u57fa\u672c\u7b97\u6570   add:to:  from:subtract:  multiply:by:  divide:by:  modulus:by:  abs:   \u9ad8\u7ea7\u7b97\u6570   sqrt:  log:  ln:  raise:toPower:  exp:   \u8fb9\u754c\u65b9\u6cd5   ceiling  trunc   \u968f\u673a   random  \u7b49\u540c\u4e8erand(3)  random: \u4ecearray\u4e2d\u9009\u4e00\u4e2a\u968f\u673a\u5143\u7d20   \u4e8c\u8fdb\u5236\u8fd0\u7b97   bitwiseAnd:with:  bitwiseOr:with:  bitwiseXor:with:  leftshift:by:  rightshift:by:  onesComplement:   \u65e5\u671f   now   \u5b57\u7b26\u4e32   lowercase:  uppercase:", 
            "title": "NSExpression"
        }, 
        {
            "location": "/nshipster/#nsfilemanager", 
            "text": "\u5bf9\u4e8e\u4e00\u822c\u9700\u6c42\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a  category  \u5f88\u591a\u4ee3\u7801\u7247\u6bb5\u793a\u4f8b   Determining If A File Exists  Listing All Files In A Directory  Recursively Enumerating Files In A Directory  Creating a Directory  Deleting a File  Determining the Creation Date of a File  Moving an Item to Ubiquitous Storage   \u7b49\u7b49\u3002\u3002", 
            "title": "NSFileManager"
        }, 
        {
            "location": "/nshipster/#nsvalue", 
            "text": "\u4f5c\u4e3a\u6807\u91cf\u503c\u7684 boxing\uff0c\u4f7f\u7528  NSValue  \u5c06\u6807\u91cf\u503c\u8fdb\u884c\u5c01\u88c5\u3002\u4e00\u822c\u7528\u4e8e\u5c06\u6807\u91cf\u503c\u63d2\u5165\u5230 collection \u4e2d\u65f6\u4f7f\u7528\u3002  \u4f7f\u7528\u4f8b\u5b50  // assume ImaginaryNumber defined:\ntypedef struct {\n    float real;\n    float imaginary;\n} ImaginaryNumber;\n\n\nImaginaryNumber miNumber;\nmiNumber.real = 1.1;\nmiNumber.imaginary = 1.41;\n\nNSValue *miValue = [NSValue valueWithBytes:  miNumber\n                            withObjCType:@encode(ImaginaryNumber)];\n\nImaginaryNumber miNumber2;\n[miValue getValue: miNumber2];", 
            "title": "NSValue"
        }
    ]
}